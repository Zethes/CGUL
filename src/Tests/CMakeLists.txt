# Jatta - General Utility Library
# Copyright (C) 2012-2013, Joshua Brookover and Amber Thrall
# All rights reserved.

# Tests for C++ features

INCLUDE(CheckIncludeFileCXX)
INCLUDE(CheckCXXCompilerFlag)

FUNCTION(CHECK_STL_HEADER HEADER)
    STRING(TOUPPER ${HEADER} HEADER_UPPER)
    CHECK_INCLUDE_FILE_CXX(${HEADER} ${HEADER_UPPER}_FOUND)
    IF (${HEADER_UPPER}_FOUND)
        SET(CPP_HEADER_${HEADER_UPPER} ON CACHE BOOL "Does C++ have <${HEADER}>?")
        SET(JATTA_CPP_CONFIG "${JATTA_CPP_CONFIG}\n#define _CPP_HEADER_${HEADER_UPPER}" PARENT_SCOPE)
    ELSE()
        SET(CPP_HEADER_${HEADER_UPPER} OFF CACHE BOOL "Does C++ have <${HEADER}>?")
    ENDIF()
    MARK_AS_ADVANCED(CPP_HEADER_${HEADER_UPPER})
ENDFUNCTION()

FUNCTION(CHECK_HEADER HEADER CACHE_NAME)
    STRING(TOUPPER ${HEADER} HEADER_UPPER)
    CHECK_INCLUDE_FILE_CXX(${HEADER} ${HEADER_UPPER}_FOUND)
    IF (${HEADER_UPPER}_FOUND)
        SET(CPP_HEADER_${CACHE_NAME} ON CACHE BOOL "Does C++ have <${HEADER}>?")
        SET(JATTA_CPP_CONFIG "${JATTA_CPP_CONFIG}\n#define _CPP_HEADER_${CACHE_NAME}" PARENT_SCOPE)
    ELSE()
        SET(CPP_HEADER_${CACHE_NAME} OFF CACHE BOOL "Does C++ have <${HEADER}>?")
    ENDIF()
    MARK_AS_ADVANCED(CPP_HEADER_${CACHE_NAME})
ENDFUNCTION()

FUNCTION(CHECK_TEST TEST DESCRIPTION CACHE_NAME)
    TRY_COMPILE(${CACHE_NAME}_COMPILES ${CMAKE_CURRENT_BINARY_DIR}
${CMAKE_CURRENT_SOURCE_DIR}/${TEST})
    IF(${CACHE_NAME}_COMPILES)
        SET(${CACHE_NAME} ON CACHE BOOL ${DESCRIPTION})
        SET(JATTA_CPP_CONFIG "${JATTA_CPP_CONFIG}\n#define _${CACHE_NAME}" PARENT_SCOPE)
    ELSE()
        SET(${CACHE_NAME} OFF CACHE BOOL ${DESCRIPTION})
    ENDIF()
    MARK_AS_ADVANCED(${CACHE_NAME})
ENDFUNCTION()

FUNCTION(CHECK_FLAG FLAG TEST_NAME SUCCESS)
    CHECK_CXX_COMPILER_FLAG(${FLAG} FLAG_${TEST_NAME})
    IF(FLAG_${TEST_NAME})
        SET(JATTA_FLAGS "${JATTA_FLAGS} ${FLAG}" PARENT_SCOPE)
        #SET(CPP_FLAG_${TEST_NAME} ON CACHE BOOL "The compiler has the ${FLAG} flag.")
        SET(${SUCCESS} ON PARENT_SCOPE)
    ELSE()
        #SET(CPP_FLAG_${TEST_NAME} OFF CACHE BOOL "The compiler has the ${FLAG} flag.")
    ENDIF()
ENDFUNCTION()

IF(UNIX)
    SET(SUCCESS OFF)
    CHECK_FLAG(-std=gnu++11 STD_GNUPP11 SUCCESS)
    IF(NOT SUCCESS)
        CHECK_FLAG(-std=gnu++0x STD_GNUPP0X SUCCESS)
    ENDIF()
    IF(NOT SUCCESS)
        CHECK_FLAG(-std=c++11 STD_CPP11 SUCCESS)
    ENDIF()
    IF(NOT SUCCESS)
        CHECK_FLAG(-std=c++0x STD_CPP0X SUCCESS)
    ENDIF()
    CHECK_FLAG(-MD MD SUCCESS)
    CHECK_FLAG(-Wall WARN_ALL SUCCESS)
    CHECK_FLAG(-g DEBUG SUCCESS)
    IF(APPLE)
        #CHECK_FLAG(-ObjC OBJC SUCCESS)
    ELSEIF(UNIX)
        CHECK_FLAG(-0s 0S SUCCESS)
    ENDIF()
ELSEIF(MSVC)
ENDIF()

TRY_COMPILE(ENVIRONMENT_COMPILES ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/compile.cpp)
IF(NOT ENVIRONMENT_COMPILES)
    MESSAGE(FATAL_ERROR "Failed to compile a simple test program.  The compiler is not supported.")
ENDIF()

SET(JATTA_CPP_CONFIG "// == SUPPORTED C++ STL HEADERS == //")

CHECK_STL_HEADER(algorithm)
CHECK_STL_HEADER(array)
CHECK_STL_HEADER(bitset)
CHECK_STL_HEADER(chrono)
CHECK_STL_HEADER(condition_variable)
CHECK_STL_HEADER(deque)
CHECK_STL_HEADER(exception)
CHECK_STL_HEADER(forward_list)
CHECK_STL_HEADER(fstream)
CHECK_STL_HEADER(functional)
CHECK_STL_HEADER(future)
CHECK_STL_HEADER(iomanip)
CHECK_STL_HEADER(ios)
CHECK_STL_HEADER(iosfwd)
CHECK_STL_HEADER(iostream)
CHECK_STL_HEADER(istream)
CHECK_STL_HEADER(iterator)
CHECK_STL_HEADER(limits)
CHECK_STL_HEADER(list)
CHECK_STL_HEADER(locale)
CHECK_STL_HEADER(map)
CHECK_STL_HEADER(memory)
CHECK_STL_HEADER(mutex)
CHECK_STL_HEADER(new)
CHECK_STL_HEADER(ostream)
CHECK_STL_HEADER(queue)
CHECK_STL_HEADER(regex)
CHECK_STL_HEADER(set)
CHECK_STL_HEADER(sstream)
CHECK_STL_HEADER(stack)
CHECK_STL_HEADER(stdexcept)
CHECK_STL_HEADER(streambuf)
CHECK_STL_HEADER(string)
CHECK_STL_HEADER(thread)
CHECK_STL_HEADER(tuple)
CHECK_STL_HEADER(typeinfo)
CHECK_STL_HEADER(unordered_map)
CHECK_STL_HEADER(unordered_set)
CHECK_STL_HEADER(utility)
CHECK_STL_HEADER(vector)

CHECK_STL_HEADER(cstdint)

SET(JATTA_CPP_CONFIG "${JATTA_CPP_CONFIG}\n\n// == SUPPORTED C HEADERS == //")

CHECK_HEADER(dlfcn.h DLFCN_H)
CHECK_HEADER(stdint.h STDINT_H)

SET(JATTA_CPP_CONFIG "${JATTA_CPP_CONFIG}\n\n// == SUPPORTED C++ FEATURES == //")

CHECK_TEST("double_reference.cpp" "Does C++ have double references (&&)?" CPP_DOUBLE_REFERENCE)
CHECK_TEST("enum_class.cpp" "Does C++ have enum class?" CPP_ENUM_CLASS)
CHECK_TEST("nullptr.cpp" "Does C++ have nullptr?" CPP_NULLPTR)
CHECK_TEST("qualified_enum.cpp" "Does C++ have qualified enums?" CPP_QUALIFIED_ENUM)
CHECK_TEST("static_assert.cpp" "Does C++ have static_assert?" CPP_STATIC_ASSERT)
CHECK_TEST("std_move.cpp" "Does C++ have std::move?" CPP_STD_MOVE)
CHECK_TEST("std_thread.cpp" "Does C++ have std::thread?" CPP_STD_THREAD)
CHECK_TEST("move_constructor.cpp" "Does C++ have move constructors?" CPP_MOVE_CONSTRUCTOR)
CHECK_TEST("u8.cpp" "Does C++ have u8 strings?" CPP_U8)

SET(JATTA_CPP_CONFIG ${JATTA_CPP_CONFIG} PARENT_SCOPE)
SET(JATTA_FLAGS ${JATTA_FLAGS} PARENT_SCOPE)
